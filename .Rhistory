def lambda_handler(event, context):
try:
# コンテキストから実行リージョンを取得し、クライアントを初期化
global bedrock_client
if bedrock_client is None:
region = extract_region_from_arn(context.invoked_function_arn)
bedrock_client = boto3.client('bedrock-runtime', region_name=region)
print(f"Initialized Bedrock client in region: {region}")
print("Received event:", json.dumps(event))
# Cognitoで認証されたユーザー情報を取得
user_info = None
if 'requestContext' in event and 'authorizer' in event['requestContext']:
user_info = event['requestContext']['authorizer']['claims']
print(f"Authenticated user: {user_info.get('email') or user_info.get('cognito:username')}")
# リクエストボディの解析
body = json.loads(event['body'])
message = body['message']
conversation_history = body.get('conversationHistory', [])
print("Processing message:", message)
print("Using model:", MODEL_ID)
# 会話履歴を使用
messages = conversation_history.copy()
# ユーザーメッセージを追加
messages.append({
"role": "user",
"content": message
})
#add 2025/4/29
# FastAPIモデルのエンドポイントURL
url = MODEL_ID
# 入力データをJSON形式にエンコード
headers = {
"Content-Type": "application/json"
}
data = json.dumps(messages).encode("utf-8")
# リクエストを作成
req = urllib.request.Request(url, data=data, headers=headers, method="POST")
try:
# レスポンスを取得
with urllib.request.urlopen(req) as response:
# レスポンスをデコードして返す
result = response.read().decode("utf-8")
return json.loads(result)
except urllib.error.URLError as e:
